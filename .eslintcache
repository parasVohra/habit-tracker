[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"11","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx":"12","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx":"13"},{"size":544,"mtime":1616072891858,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":814,"mtime":1616073087153,"results":"17","hashOfConfig":"15"},{"size":256,"mtime":1616078539381,"results":"18","hashOfConfig":"15"},{"size":5970,"mtime":1616681730579,"results":"19","hashOfConfig":"15"},{"size":85,"mtime":1611877761129,"results":"20","hashOfConfig":"15"},{"size":4531,"mtime":1615392956999,"results":"21","hashOfConfig":"15"},{"size":2640,"mtime":1616681995140,"results":"22","hashOfConfig":"15"},{"size":549,"mtime":1612993503351,"results":"23","hashOfConfig":"24"},{"size":637,"mtime":1615733614739,"results":"25","hashOfConfig":"15"},{"size":184,"mtime":1613099504994,"results":"26","hashOfConfig":"15"},{"size":996,"mtime":1616075163088,"results":"27","hashOfConfig":"15"},{"size":3015,"mtime":1616681900345,"results":"28","hashOfConfig":"15"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"pyu0sr",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"31"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["59","60"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",["61","62","63"],"import React, { useContext, useState } from \"react\";\nimport RenderHabits from \"../components/RenderHabits\";\nimport { HabitContext } from \"../context/HabitContext\";\n\nexport function AddHabit() {\n  return (\n    <div>\n      <RenderHabits />\n    </div>\n  );\n}\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",["64","65","66","67","68","69"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { HabitContext } from \"../context/HabitContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Checkbox,\n  Button,\n  Grid,\n} from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { green } from \"@material-ui/core/colors\";\nimport RenderHabitsByCategory from \"../components/RenderHabitsByCategory\";\nimport Popover from \"@material-ui/core/Popover\";\nimport HabitService from \"../services/habitService\";\nimport moment from \"moment\";\nimport RenderHabits from \"../components/RenderHabits\";\n\nexport function Index() {\n  //const { habit } = useContext(HabitContext);\n  const [habits, setHabits] = useState(null);\n  const [categories, setCategories] = useState(null);\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [currentDate, setCurrentDate] = useState(moment()._d);\n  const [isNextDisable, setNextDisable] = useState(false);\n\n  // this fetch function is need to extracted and need to be reused\n  useEffect(() => {\n    //fetch habits from server\n    if (\n      moment(currentDate).format(\"DDMMYYYY\") === moment().format(\"DDMMYYYY\")\n    ) {\n      setNextDisable(true);\n    } else {\n      setNextDisable(false);\n    }\n    async function fetchData() {\n      // You can await here\n      const { data } = await HabitService.getHabits();\n      setHabits(data);\n\n      //create category array based on habits data\n      let categoryArray = habitCategory(data);\n      setCategories(categoryArray);\n    }\n    fetchData();\n    console.log(currentDate);\n  }, [currentDate]);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const changeDate = (n) => {\n    // change the current date to prev or next date\n    let changedDate = moment(currentDate).add(n, \"days\");\n    setCurrentDate(changedDate._d);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n    console.log(event);\n\n    // update is track is also need to extracted\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want want to render the habits\n        console.log(res);\n      }\n\n      console.log(res);\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <React.Fragment>\n      <div style={{ margin: \"20px\" }}>\n        {moment(currentDate).format(\"DDMMYYYY\")}\n      </div>\n\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {habits\n                ? habits.map((h, i) => {\n                    return (\n                      <TableRow key={i}>\n                        <TableCell align=\"center\">{h.habitName}</TableCell>\n                        <TableCell align=\"center\">\n                          <Checkbox\n                            id={h._id}\n                            onChange={(e) => handleChange(e)}\n                            checked={h.isTracked}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                : null}\n            </TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(-1)}\n              >\n                Prev\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                disabled={isNextDisable}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(1)}\n              >\n                Next\n              </Button>\n            </Grid>\n            <Grid xs={3} item></Grid>\n            <Grid item justify=\"flex-end\">\n              <Fab\n                aria-describedby={id}\n                size=\"small\"\n                color=\"primary\"\n                onClick={handleClick}\n              >\n                <AddIcon />\n              </Fab>\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\">\n            <RenderHabits habit={habits} date={currentDate} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nconst habitCategory = (habits) => {\n  let category = {};\n  let categoryArray = [];\n  if (habits) {\n    for (let h of habits) {\n      if (!category.hasOwnProperty(h.category)) {\n        categoryArray.push(h.category);\n        category[h.category] = \" \";\n      } else {\n        category[h.category] = \" \";\n      }\n    }\n  }\n\n  return categoryArray;\n};\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    maxWidth: 600,\n    paddingLeft: 10,\n  },\n  checkbox: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n});\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["70"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx",["71","72","73","74"],"import {\n  Checkbox,\n  Grid,\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\n//import moment from \"moment\";\n\nimport HabitService from \"../services/habitService\";\nimport RenderHabitsByCategory from \"../components/RenderHabitsByCategory\";\n\nconst RenderHabits = ({ habit, date }) => {\n  const [habits, setHabits] = useState(habit);\n  const [habitSt, setHabitSt] = useState(null);\n  const [categories, setCategory] = useState([]);\n  const classes = useStyles();\n  const [currentDate, setCurrentDate] = useState(date);\n\n  // async function getHabits() {\n  //   const { data } = await HabitService.getHabits();\n  //   setHabits(data);\n  // }\n\n  // useEffect(() => {\n  //   getHabits();\n  // }, [currentDate]);\n\n  useEffect(() => {\n    setCurrentDate(date);\n  }, [date]);\n\n  useEffect(() => {\n    const [habit, category] = HabitsByCategory(habits);\n\n    setCategory(category);\n\n    setHabitSt(habit);\n\n    console.log(\"hi\");\n  }, [habits]);\n\n  return (\n    <div className={classes.root}>\n      <TableContainer className={classes.table} component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Habits </TableCell>\n              <TableCell align=\"center\">Status</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {habitSt ? (\n              <>\n                {categories ? (\n                  categories.map((c, index) => {\n                    return (\n                      <>\n                        <TableRow key={index}>\n                          <TableCell>{c}</TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                        <RenderHabitsByCategory\n                          date={currentDate}\n                          category={c}\n                          habit={habitSt}\n                        />\n                      </>\n                    );\n                  })\n                ) : (\n                  <TableCell>ss</TableCell>\n                )}\n              </>\n            ) : (\n              <TableCell>ss</TableCell>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: \"20px\",\n    textAlign: \"center\",\n    color: \"black\",\n  },\n}));\n\n//restructure habits by categories\nfunction HabitsByCategory(habits) {\n  let habitRestructure = {};\n  let categories = [];\n  // if category is present in object\n  for (let h of habits) {\n    if (!habitRestructure.hasOwnProperty(h.category)) {\n      categories.push(h.category);\n      habitRestructure[h.category] = [];\n      habitRestructure[h.category].push(h);\n    } else {\n      habitRestructure[h.category].push(h);\n    }\n  }\n  return [habitRestructure, categories];\n}\nexport default RenderHabits;\n",{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"83","line":1,"column":29,"nodeType":"81","messageId":"82","endLine":1,"endColumn":37},{"ruleId":"79","severity":1,"message":"84","line":3,"column":10,"nodeType":"81","messageId":"82","endLine":3,"endColumn":22},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":27},{"ruleId":"79","severity":1,"message":"84","line":2,"column":10,"nodeType":"81","messageId":"82","endLine":2,"endColumn":22},{"ruleId":"79","severity":1,"message":"85","line":8,"column":3,"nodeType":"81","messageId":"82","endLine":8,"endColumn":17},{"ruleId":"79","severity":1,"message":"86","line":11,"column":3,"nodeType":"81","messageId":"82","endLine":11,"endColumn":8},{"ruleId":"79","severity":1,"message":"87","line":19,"column":8,"nodeType":"81","messageId":"82","endLine":19,"endColumn":30},{"ruleId":"79","severity":1,"message":"88","line":28,"column":10,"nodeType":"81","messageId":"82","endLine":28,"endColumn":20},{"ruleId":"79","severity":1,"message":"89","line":2,"column":17,"nodeType":"81","messageId":"82","endLine":2,"endColumn":28},{"ruleId":"79","severity":1,"message":"90","line":2,"column":3,"nodeType":"81","messageId":"82","endLine":2,"endColumn":11},{"ruleId":"79","severity":1,"message":"91","line":3,"column":3,"nodeType":"81","messageId":"82","endLine":3,"endColumn":7},{"ruleId":"79","severity":1,"message":"92","line":16,"column":8,"nodeType":"81","messageId":"82","endLine":16,"endColumn":20},{"ruleId":"79","severity":1,"message":"93","line":20,"column":18,"nodeType":"81","messageId":"82","endLine":20,"endColumn":27},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'HabitContext' is defined but never used.","'TableContainer' is defined but never used.","'Paper' is defined but never used.","'RenderHabitsByCategory' is defined but never used.","'categories' is assigned a value but never used.","'useCallback' is defined but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'HabitService' is defined but never used.","'setHabits' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]