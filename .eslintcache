[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx":"11","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx":"12","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js":"13","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx":"14","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js":"15","/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/utilitiesMethods.js":"16","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signUpForm.jsx":"17","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/authServices.js":"18","/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/tokenMethods.js":"19","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signInForm.jsx":"20","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signOut.jsx":"21"},{"size":587,"mtime":1619701501152,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":1126,"mtime":1621027718367,"results":"25","hashOfConfig":"23"},{"size":182,"mtime":1619184099086,"results":"26","hashOfConfig":"23"},{"size":3680,"mtime":1620585998567,"results":"27","hashOfConfig":"23"},{"size":4498,"mtime":1618891276826,"results":"28","hashOfConfig":"23"},{"size":7053,"mtime":1620498262827,"results":"29","hashOfConfig":"23"},{"size":549,"mtime":1612993503351,"results":"30","hashOfConfig":"31"},{"size":637,"mtime":1620487234788,"results":"32","hashOfConfig":"23"},{"size":642,"mtime":1621003885152,"results":"33","hashOfConfig":"23"},{"size":2096,"mtime":1621027294770,"results":"34","hashOfConfig":"23"},{"size":2586,"mtime":1620491015711,"results":"35","hashOfConfig":"23"},{"size":1501,"mtime":1621003740063,"results":"36","hashOfConfig":"23"},{"size":2714,"mtime":1619970047710,"results":"37","hashOfConfig":"23"},{"size":656,"mtime":1620994194597,"results":"38","hashOfConfig":"23"},{"size":1641,"mtime":1620991907213,"results":"39","hashOfConfig":"23"},{"size":4698,"mtime":1621001954266,"results":"40","hashOfConfig":"23"},{"size":563,"mtime":1621028459341,"results":"41","hashOfConfig":"23"},{"size":684,"mtime":1620669336040,"results":"42","hashOfConfig":"23"},{"size":2814,"mtime":1621024445888,"results":"43","hashOfConfig":"23"},{"size":760,"mtime":1621028311648,"results":"44","hashOfConfig":"23"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},"cl0ss3",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"47"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"47"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"47"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"47"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"47"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["94","95"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",["96"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { Context } from \"../Store/habitStore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { green } from \"@material-ui/core/colors\";\nimport { addDays, format } from \"date-fns\";\nimport RenderHabits from \"../components/RenderHabits\";\nimport TrackHabit from \"../components/TrackHabit\";\nimport {\n  fetchHabitData,\n  extractCategoriesAndRestructureHabits,\n  getTodayDate,\n  getWeekStartDate,\n  getWeekEndDate,\n  extractHabitNames,\n} from \"../utilities/utilitiesMethods\";\n\nconsole.log(\"************ In Home page Component \");\n\nexport default function Home() {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [isNextDisable, setNextDisable] = useState(false);\n\n  console.log(state);\n\n  useEffect(() => {\n    async function hydrateStoreState() {\n      const habitObj = await fetchHabitData();\n\n      console.log(habitObj);\n      dispatch({ type: \"SET_HABIT\", payload: habitObj });\n      const [\n        habitRestructure,\n        categories,\n      ] = await extractCategoriesAndRestructureHabits(habitObj);\n\n      dispatch({ type: \"SET_HABIT_RESTRUCTURE\", payload: habitRestructure });\n      dispatch({ type: \"SET_CATEGORY\", payload: categories });\n\n      const habitNameList = extractHabitNames(habitObj);\n      dispatch({ type: \"SET_HABIT_NAME_LIST\", payload: habitNameList });\n\n      const todayDate = await getTodayDate();\n      dispatch({ type: \"SET_CURRENT_DATE\", payload: todayDate });\n\n      const weekStartDate = await getWeekStartDate(new Date());\n      const weekEndDate = await getWeekEndDate(new Date());\n\n      dispatch({ type: \"SET_WEEK_START_DATE\", payload: weekStartDate });\n      dispatch({ type: \"SET_WEEK_END_DATE\", payload: weekEndDate });\n    }\n\n    hydrateStoreState();\n  }, [dispatch]);\n\n  // this fetch function is need to extracted and need to be reused\n\n  const changeDate = async (n) => {\n    // change the current date to prev or next date\n    let changedDate = addDays(state.currentDate, n);\n    dispatch({ type: \"SET_CURRENT_DATE\", payload: changedDate });\n    const newStartWeekDate = await getWeekStartDate(changedDate);\n\n    dispatch({ type: \"SET_WEEK_START_DATE\", payload: newStartWeekDate });\n  };\n\n  return (\n    <React.Fragment>\n      <div style={{ margin: \"20px\" }}>\n        {format(state.currentDate, \"dd MMMM yyyy\")}\n      </div>\n\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(-7)}\n              >\n                Prev\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                disabled={isNextDisable}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(7)}\n              >\n                Next\n              </Button>\n            </Grid>\n            <Grid xs={3} item></Grid>\n            <Grid item justify=\"flex-end\">\n              <TrackHabit />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\">\n            <RenderHabits />\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    maxWidth: 600,\n    paddingLeft: 10,\n  },\n  checkbox: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n});\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",["97","98"],"import {\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Formik, useField } from \"formik\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as yup from \"yup\";\nimport habitService from \"../services/habitService\";\n\nconst Form = () => {\n  const [habit, setHabit] = useState(null);\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <Card className={classes.root}>\n      <h2>Add New Habit</h2>\n      <Formik\n        initialValues={{\n          category: \"General\",\n          habitName: \"\",\n          types: \"checkbox\",\n          color: \"black\",\n        }}\n        onSubmit={(data) => {\n          console.log(data);\n          setHabit(data);\n          saveHabit(data);\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleSubmit, handleChange, handleBlur }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={classes.root}>\n              <MySelectField\n                value={values.category}\n                select\n                label=\"Category\"\n                name=\"category\"\n                options={categories}\n              />\n            </div>\n            <div className={classes.root}>\n              <MyTextField label=\"Habit Name\" name=\"habitName\" type=\"input\" />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.types}\n                select\n                label=\"Types\"\n                name=\"types\"\n                options={types}\n              />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.color}\n                select\n                label=\"Color\"\n                name=\"color\"\n                options={colors}\n              />\n            </div>\n            <div>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Save Habit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MyTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst MySelectField = ({ label, options, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      select\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nconst validationSchema = yup.object({\n  category: yup.string().required().max(30),\n  habitName: yup.string().required().max(30),\n  types: yup.string().required(),\n  color: yup.string().required(),\n});\n\nconst saveHabit = async (habit) => {\n  //make a object of habit in order to send post\n\n  let habitData = {\n    category: habit.category,\n    habitName: habit.habitName,\n    inputType: habit.types,\n    color: habit.color,\n  };\n  console.log(\"in save habit\");\n\n  const response = await habitService.saveHabit(habitData);\n\n  console.log(response);\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    padding: 20,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst types = [\n  {\n    value: \"checkbox\",\n    label: \"Check Box\",\n  },\n  {\n    value: \"text\",\n    label: \"Text\",\n  },\n  {\n    value: \"number\",\n    label: \"Number\",\n  },\n];\n\nconst categories = [\n  {\n    value: \"General\",\n    label: \"General\",\n  },\n  {\n    value: \"Health/Nutrition\",\n    label: \"Health/Nutrition\",\n  },\n  {\n    value: \"Skills\",\n    label: \"Skills\",\n  },\n  {\n    value: \"Work/Study\",\n    label: \"Work/Study\",\n  },\n  {\n    value: \"House Hold\",\n    label: \"House Hold\",\n  },\n  {\n    value: \"Quit Habit\",\n    label: \"Quit Habit\",\n  },\n];\n\nconst colors = [\n  {\n    value: \"red\",\n    label: \"Red\",\n  },\n  {\n    value: \"blue\",\n    label: \"Blue\",\n  },\n  {\n    value: \"black\",\n    label: \"Black\",\n  },\n  {\n    value: \"green\",\n    label: \"Green\",\n  },\n];\n\nexport default Form;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["99","100","101","102","103"],"import { Checkbox, TableCell, TableRow } from \"@material-ui/core\";\nimport React, { useEffect, useState, useRef, useContext } from \"react\";\nimport moment from \"moment\";\nimport HabitService from \"../services/habitService\";\nimport { Context } from \"../Store/habitStore\";\nimport { addDays, format } from \"date-fns\";\n\nconsole.log(\"*************************In Render Categories\");\n\n// First day of week is sunday\nconst FIRST_WEEKDAY_INDEX = 0;\n\n// Last day of week is saturday\nconst LAST_WEEKDAY_INDEX = 6;\n\nconst RenderHabitsByCategory = ({ category }) => {\n  const [state, dispatch] = useContext(Context);\n  const [habitData, setHabitData] = useState(null);\n  const [cat] = useState(category);\n  const [currentDate, setCurrentDate] = useState(null);\n  const [habitStatus, setHabitStatus] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n\n  useEffect(() => {\n    setHabitData(state.habitRestructure);\n    setCurrentDate(state.currentDate);\n    setStartDate(state.weekStartDate);\n  }, [\n    state.habitRestructure,\n    state.category,\n    state.currentDate,\n    state.weekStartDate,\n  ]);\n\n  useEffect(() => {\n    const getCurrentStatus = (habit) => {\n      habit[cat].map((h) => {\n        //let fDate = moment(currentDate).format(\"DDMMYYYY\");\n\n        let isHabitComplete = {};\n        let name = h.habitName;\n        isHabitComplete[name] = [];\n        let forloop = false;\n        for (let i = FIRST_WEEKDAY_INDEX; i <= LAST_WEEKDAY_INDEX; i++) {\n          let dateCounter = addDays(state.weekStartDate, i);\n\n          let formatDate = format(dateCounter, \"ddMMyyyy\");\n          let status = h.habitTrack.filter((d) => d.date === formatDate);\n          //console.log(status[0].isComplete);\n          if (status.length > 0 && status[0].isComplete) {\n            isHabitComplete[name][i] = true;\n          } else {\n            isHabitComplete[name][i] = false;\n          }\n\n          if (i === 6) {\n            forloop = true;\n          }\n        }\n\n        if (forloop) {\n          dispatch({ type: \"SET_HABIT_STATUS\", payload: isHabitComplete });\n        }\n      });\n    };\n    getCurrentStatus(state.habitRestructure);\n  }, [cat, dispatch, state.weekStartDate, state.habitRestructure]);\n\n  const check = useRef();\n\n  const updateStatus = async (data) => {\n    let response = await HabitService.updateHabitStatus(data);\n\n    if (response.status === 200) {\n      alert(\"Habit Status updated\");\n      check.current.focus();\n    }\n  };\n\n  const handelChange = (e, habit, index) => {\n    let data = {\n      id: habit._id,\n      date: moment(state.weekStartDate).add(index, \"days\").format(\"DDMMYYYY\"),\n      day: moment(state.weekStartDate).add(index, \"days\").format(\"ddd\"),\n      isComplete: e.target.checked,\n      inputData: null,\n    };\n    let name = habit.habitName;\n\n    let updateData = state.habitStatus;\n    updateData[name][index] = e.target.checked;\n    dispatch({ type: \"SET_HABIT_STATUS\", payload: updateData });\n\n    if (habit.inputType !== \"checkbox\" && e.target.checked === true) {\n      let popupVal = prompt(`Enter the  value for ${habit.habitName}`, \"\");\n\n      if (popupVal === null) {\n        alert(\"Please enter the value \");\n      } else {\n        // save the changes to data base\n        data.inputData = popupVal;\n        updateStatus(data);\n      }\n    } else {\n      //format data for update which includes date, day , isComplete, data\n      //send post request to server to update data\n      updateStatus(data);\n    }\n  };\n\n  return (\n    <>\n      {habitData ? (\n        habitData[cat].map((h) => {\n          return (\n            <TableRow key={h._id}>\n              <TableCell key={h._id} align=\"center\">\n                {h.habitName}\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={state.habitStatus[h.habitName][0] || false}\n                  index={0}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 0)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][1]\n                      : false\n                  }\n                  index={1}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 1)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][2]\n                      : false\n                  }\n                  index={2}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 2)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][3]\n                      : false\n                  }\n                  index={3}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 3)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][4]\n                      : false\n                  }\n                  index={4}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 4)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][5]\n                      : false\n                  }\n                  index={5}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 5)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][6]\n                      : false\n                  }\n                  index={6}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 6)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n            </TableRow>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default RenderHabitsByCategory;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx",["104"],"import {\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\n\nimport RenderHabitsByCategory from \"../components/RenderHabitsByCategory\";\nimport { Context } from \"../Store/habitStore\";\n\nconst RenderHabits = () => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <TableContainer className={classes.table} component={Paper}>\n        <Table\n          aria-label=\"simple table\"\n          padding=\"none\"\n          size=\"small\"\n          stickyHeader\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Habits </TableCell>\n              <TableCell align=\"center\">S</TableCell>\n              <TableCell align=\"center\">M</TableCell>\n              <TableCell align=\"center\">T</TableCell>\n              <TableCell align=\"center\">W</TableCell>\n              <TableCell align=\"center\">T</TableCell>\n              <TableCell align=\"center\">F</TableCell>\n              <TableCell align=\"center\">S</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {state.habitRestructure ? (\n              <>\n                {state.category ? (\n                  state.category.map((c, index) => {\n                    return (\n                      <>\n                        <TableRow key={c}>\n                          <TableCell>\n                            <strong>{c}</strong>\n                          </TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                        <RenderHabitsByCategory category={c} />\n                      </>\n                    );\n                  })\n                ) : (\n                  <TableCell>ss</TableCell>\n                )}\n              </>\n            ) : (\n              <TableCell>ss</TableCell>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: \"5px\",\n    textAlign: \"center\",\n    color: \"black\",\n  },\n  table: {\n    minWidth: 350,\n  },\n}));\nexport default RenderHabits;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx",["105","106","107","108","109","110","111"],"import Popover from \"@material-ui/core/Popover\";\nimport { Context } from \"../Store/habitStore\";\nimport HabitService from \"../services/habitService\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Checkbox,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nfunction TrackHabit() {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const [habitTracked, setHabitTracked] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n\n    /**\n     * @todo update is track is also need to extracted\n     * */\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want to render the habits\n      }\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody></TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Fab\n        aria-describedby={id}\n        size=\"small\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <AddIcon />\n      </Fab>\n    </div>\n  );\n}\n\nexport default TrackHabit;\n\n// {\n//   state.habits\n//     ? state.habits.map((h, i) => {\n//         return (\n//           <TableRow key={i}>\n//             <TableCell align=\"center\">{h.habitName}</TableCell>\n//             <TableCell align=\"center\">\n//               <Checkbox\n//                 id={h._id}\n//                 onChange={(e) => handleChange(e)}\n//                 checked={h.isTracked}\n//               />\n//             </TableCell>\n//           </TableRow>\n//         );\n//       })\n//     : null;\n// }\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/utilitiesMethods.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signUpForm.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/authServices.js",["112"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/tokenMethods.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signInForm.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/auth/signOut.jsx",["113","114"],"import { signOut } from \"../../services/authServices\";\nimport React, { useEffect, useContext } from \"react\";\nimport { tokenKey } from \"../../config.json\";\nimport { useHistory } from \"react-router-dom\";\nimport { Context } from \"../../Store/habitStore\";\n\nconst SignOut = () => {\n  const history = useHistory();\n  const [state, dispatch] = useContext(Context);\n  useEffect(() => {\n    dispatch({ type: \"SET_TOKEN\", payload: \"\" });\n    dispatch({ type: \"SET_IS_AUTHENTICATED\", payload: false });\n    dispatch({ type: \"SET_USER_INFO\", payload: {} });\n    signOut(tokenKey);\n  }, []);\n\n  // history.push(\"/\");\n  return (\n    <div>\n      <h1>LoggedOut</h1>\n      <pre>{JSON.stringify(state.isAuthenticated, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport default SignOut;\n",{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":23,"column":25,"nodeType":"121","messageId":"122","endLine":23,"endColumn":39},{"ruleId":"119","severity":1,"message":"123","line":9,"column":17,"nodeType":"121","messageId":"122","endLine":9,"endColumn":27},{"ruleId":"119","severity":1,"message":"124","line":14,"column":10,"nodeType":"121","messageId":"122","endLine":14,"endColumn":15},{"ruleId":"119","severity":1,"message":"125","line":20,"column":10,"nodeType":"121","messageId":"122","endLine":20,"endColumn":21},{"ruleId":"119","severity":1,"message":"126","line":21,"column":10,"nodeType":"121","messageId":"122","endLine":21,"endColumn":21},{"ruleId":"119","severity":1,"message":"127","line":21,"column":23,"nodeType":"121","messageId":"122","endLine":21,"endColumn":37},{"ruleId":"119","severity":1,"message":"128","line":22,"column":10,"nodeType":"121","messageId":"122","endLine":22,"endColumn":19},{"ruleId":"129","severity":1,"message":"130","line":37,"column":26,"nodeType":"131","messageId":"132","endLine":37,"endColumn":28},{"ruleId":"119","severity":1,"message":"133","line":17,"column":17,"nodeType":"121","messageId":"122","endLine":17,"endColumn":25},{"ruleId":"119","severity":1,"message":"134","line":10,"column":3,"nodeType":"121","messageId":"122","endLine":10,"endColumn":11},{"ruleId":"119","severity":1,"message":"135","line":12,"column":29,"nodeType":"121","messageId":"122","endLine":12,"endColumn":38},{"ruleId":"119","severity":1,"message":"136","line":17,"column":10,"nodeType":"121","messageId":"122","endLine":17,"endColumn":15},{"ruleId":"119","severity":1,"message":"133","line":17,"column":17,"nodeType":"121","messageId":"122","endLine":17,"endColumn":25},{"ruleId":"119","severity":1,"message":"137","line":20,"column":10,"nodeType":"121","messageId":"122","endLine":20,"endColumn":22},{"ruleId":"119","severity":1,"message":"138","line":20,"column":24,"nodeType":"121","messageId":"122","endLine":20,"endColumn":39},{"ruleId":"119","severity":1,"message":"139","line":29,"column":9,"nodeType":"121","messageId":"122","endLine":29,"endColumn":21},{"ruleId":"140","severity":1,"message":"141","line":20,"column":1,"nodeType":"142","endLine":24,"endColumn":3},{"ruleId":"119","severity":1,"message":"143","line":8,"column":9,"nodeType":"121","messageId":"122","endLine":8,"endColumn":16},{"ruleId":"144","severity":1,"message":"145","line":15,"column":6,"nodeType":"146","endLine":15,"endColumn":8,"suggestions":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'setNextDisable' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'habit' is assigned a value but never used.","'currentDate' is assigned a value but never used.","'habitStatus' is assigned a value but never used.","'setHabitStatus' is assigned a value but never used.","'startDate' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'dispatch' is assigned a value but never used.","'Checkbox' is defined but never used.","'useEffect' is defined but never used.","'state' is assigned a value but never used.","'habitTracked' is assigned a value but never used.","'setHabitTracked' is assigned a value but never used.","'handleChange' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},"Update the dependencies array to be: [dispatch]",{"range":"153","text":"154"},[574,576],"[dispatch]"]