[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"11"},{"size":512,"mtime":1611785780185,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1130,"mtime":1612112822717,"results":"15","hashOfConfig":"13"},{"size":2183,"mtime":1612061701924,"results":"16","hashOfConfig":"13"},{"size":5192,"mtime":1615988589125,"results":"17","hashOfConfig":"13"},{"size":85,"mtime":1611877761129,"results":"18","hashOfConfig":"13"},{"size":4531,"mtime":1615392956999,"results":"19","hashOfConfig":"13"},{"size":3654,"mtime":1615988042364,"results":"20","hashOfConfig":"13"},{"size":549,"mtime":1612993503351,"results":"21","hashOfConfig":"22"},{"size":637,"mtime":1615733614739,"results":"23","hashOfConfig":"13"},{"size":184,"mtime":1613099504994,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"akndl3",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["49","50"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",["51","52","53"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["54","55"],"import { Checkbox, TableCell, TableRow } from \"@material-ui/core\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport moment from \"moment\";\n\nimport HabitService from \"../services/habitService\";\nimport Condition from \"yup/lib/Condition\";\n\nconst RenderHabitsByCategory = ({ category, habit }) => {\n  const [habitData, setHabit] = useState(habit);\n\n  const [habitStatus, setHabitStatus] = useState([]);\n\n  const HabitState = (habit) => {\n    habit.forEach((h) => {\n      let status = false;\n\n      let trackCount = h.habitTrack.length;\n\n      if (trackCount === 0) {\n        status = false;\n      } else {\n        h.habitTrack.forEach((val) => {\n          if (val.date === moment().format(\"DDMMYYYY\")) {\n            status = val.isComplete;\n          } else {\n            status = false;\n          }\n        });\n      }\n\n      setHabitStatus((oldHabit) => [\n        ...oldHabit,\n        {\n          habitId: h._id,\n          habitName: h.habitName,\n          habitCategory: h.category,\n          habitCheck: status,\n          habitTracked: h.isTracked,\n          habitInputType: h.inputType,\n        },\n      ]);\n    });\n  };\n\n  useEffect(() => {\n    HabitState(habitData);\n\n    return () => {};\n  }, [habitData]);\n\n  const handleChange = (e, habit) => {\n    if (habit) {\n      console.log(habit);\n      console.log(e.target.checked);\n    }\n\n    if (habit.habitInputType !== \"checkbox\" && e.target.checked === true) {\n      let popupVal = prompt(`Enter the  value for ${habit.habitName}`, \"\");\n\n      if (popupVal === null) {\n        alert(\"Please enter the value \");\n      } else {\n        // save the changes to data base\n        let data = {\n          id: habit.habitId,\n          date: moment().format(\"DDMMYYYY\"),\n          day: moment().format(\"ddd\"),\n          isComplete: e.target.checked,\n          inputData: popupVal,\n        };\n        let updateStatus = async () => {\n          let response = await HabitService.updateHabitStatus(data);\n          if (response.status === 200) {\n            const { data } = await HabitService.getHabits();\n\n            console.log(data);\n            setHabit(data);\n            setHabitStatus([]);\n          }\n        };\n        updateStatus();\n      }\n    } else {\n      //format data for update which includes date, day , isComplete, data\n      let data = {\n        id: habit.habitId,\n        date: moment().format(\"DDMMYYYY\"),\n        day: moment().format(\"ddd\"),\n        isComplete: e.target.checked,\n        inputData: null,\n      };\n      //send post request to server to update data\n      let updateStatus = async () => {\n        let response = await HabitService.updateHabitStatus(data);\n        if (response.status === 200) {\n          const { data } = await HabitService.getHabits();\n\n          console.log(data);\n          setHabit(data);\n          setHabitStatus([]);\n        }\n      };\n      updateStatus();\n    }\n  };\n\n  return (\n    <>\n      <TableRow align=\"left\">{category}</TableRow>\n      {habitStatus\n        ? habitStatus.map((h, i) => {\n            return h.habitCategory === category && h.habitTracked === true ? (\n              <TableRow key={i}>\n                <TableCell align=\"center\">{h.habitName}</TableCell>\n                <TableCell align=\"center\">\n                  <Checkbox\n                    checked={h.habitCheck} // call a function to to find current day in habit tracker and check isComplete status\n                    onChange={(e) => handleChange(e, h)}\n                  ></Checkbox>\n                </TableCell>\n              </TableRow>\n            ) : null;\n          })\n        : null}\n    </>\n  );\n};\n\nexport default RenderHabitsByCategory;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":27},{"ruleId":"60","severity":1,"message":"64","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":22},{"ruleId":"60","severity":1,"message":"65","line":29,"column":23,"nodeType":"62","messageId":"63","endLine":29,"endColumn":37},{"ruleId":"60","severity":1,"message":"66","line":2,"column":17,"nodeType":"62","messageId":"63","endLine":2,"endColumn":28},{"ruleId":"60","severity":1,"message":"67","line":6,"column":8,"nodeType":"62","messageId":"63","endLine":6,"endColumn":17},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'HabitContext' is defined but never used.","'setCurrentDate' is assigned a value but never used.","'useCallback' is defined but never used.","'Condition' is defined but never used.","no-global-assign","no-unsafe-negation"]