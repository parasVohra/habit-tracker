[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx":"11","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx":"12","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js":"13","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx":"14","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js":"15"},{"size":544,"mtime":1616072891858,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":697,"mtime":1616950751151,"results":"19","hashOfConfig":"17"},{"size":247,"mtime":1616950882254,"results":"20","hashOfConfig":"17"},{"size":2827,"mtime":1616952329083,"results":"21","hashOfConfig":"17"},{"size":4479,"mtime":1616688829932,"results":"22","hashOfConfig":"17"},{"size":2645,"mtime":1616951916917,"results":"23","hashOfConfig":"17"},{"size":549,"mtime":1612993503351,"results":"24","hashOfConfig":"25"},{"size":637,"mtime":1615733614739,"results":"26","hashOfConfig":"17"},{"size":184,"mtime":1613099504994,"results":"27","hashOfConfig":"17"},{"size":996,"mtime":1616075163088,"results":"28","hashOfConfig":"17"},{"size":2622,"mtime":1616955117924,"results":"29","hashOfConfig":"17"},{"size":586,"mtime":1616954895637,"results":"30","hashOfConfig":"17"},{"size":2877,"mtime":1616952165513,"results":"31","hashOfConfig":"17"},{"size":537,"mtime":1616951151894,"results":"32","hashOfConfig":"17"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"pyu0sr",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"35"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"35"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"35"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"35"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["69","70"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",["71"],"import React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Store from \"./Store/habitStore\";\nimport { Home } from \"./pages\";\nimport { AddHabit } from \"./pages/addHabit\";\nimport Form from \"./components/form\";\nimport NavBar from \"./components/navBar\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Store>\n        <NavBar />\n        <main className=\"container-sm\">\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/addHabit\" component={AddHabit} />\n            <Route path=\"/form\" component={Form} />\n          </Switch>\n        </main>\n      </Store>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",["72","73","74"],"import React, { useContext, useState } from \"react\";\nimport RenderHabits from \"../components/RenderHabits\";\nimport { Context } from \"../Store/habitStore\";\n\nexport function AddHabit() {\n  return (\n    <div>\n      <RenderHabits />\n    </div>\n  );\n}\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",["75"],"import {\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Formik, useField } from \"formik\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as yup from \"yup\";\nimport habitService from \"../services/habitService\";\n\nconst MyTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst MySelectField = ({ label, options, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      select\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nconst validationSchema = yup.object({\n  category: yup.string().required().max(30),\n  habitName: yup.string().required().max(30),\n  types: yup.string().required(),\n  color: yup.string().required(),\n});\n\nconst saveHabit = async (habit) => {\n  //make a object of habit in order to send post\n\n  let habitData = {\n    category: habit.category,\n    habitName: habit.habitName,\n    inputType: habit.types,\n    color: habit.color,\n  };\n\n  const response = await habitService.saveHabit(habitData);\n\n  console.log(response);\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    padding: 20,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst types = [\n  {\n    value: \"checkbox\",\n    label: \"Check Box\",\n  },\n  {\n    value: \"text\",\n    label: \"Text\",\n  },\n  {\n    value: \"number\",\n    label: \"Number\",\n  },\n];\n\nconst categories = [\n  {\n    value: \"General\",\n    label: \"General\",\n  },\n  {\n    value: \"Health/Nutrition\",\n    label: \"Health/Nutrition\",\n  },\n  {\n    value: \"Skills\",\n    label: \"Skills\",\n  },\n  {\n    value: \"Work/Study\",\n    label: \"Work/Study\",\n  },\n  {\n    value: \"House Hold\",\n    label: \"House Hold\",\n  },\n  {\n    value: \"Quit Habit\",\n    label: \"Quit Habit\",\n  },\n];\n\nconst colors = [\n  {\n    value: \"red\",\n    label: \"Red\",\n  },\n  {\n    value: \"blue\",\n    label: \"Blue\",\n  },\n  {\n    value: \"black\",\n    label: \"Black\",\n  },\n  {\n    value: \"green\",\n    label: \"Green\",\n  },\n];\n\nconst Form = () => {\n  const [habit, setHabit] = useState(null);\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <Card className={classes.root}>\n      <h2>Add New Habit</h2>\n      <Formik\n        initialValues={{\n          category: \"General\",\n          habitName: \"\",\n          types: \"checkbox\",\n          color: \"black\",\n        }}\n        onSubmit={(data) => {\n          console.log(data);\n          setHabit([...habit, data]);\n          saveHabit(data);\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleSubmit, handleChange, handleBlur }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={classes.root}>\n              <MySelectField\n                value={values.category}\n                select\n                label=\"Category\"\n                name=\"category\"\n                options={categories}\n              />\n            </div>\n            <div className={classes.root}>\n              <MyTextField label=\"Habit Name\" name=\"habitName\" type=\"input\" />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.types}\n                select\n                label=\"Types\"\n                name=\"types\"\n                options={types}\n              />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.color}\n                select\n                label=\"Color\"\n                name=\"color\"\n                options={colors}\n              />\n            </div>\n            <div>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Save Habit\n              </Button>\n            </div>\n\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nexport default Form;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["76","77","78"],"import { Checkbox, TableCell, TableRow } from \"@material-ui/core\";\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  useRef,\n  useContext,\n} from \"react\";\nimport moment from \"moment\";\nimport HabitService from \"../services/habitService\";\nimport { Context } from \"../Store/habitStore\";\n\nconst RenderHabitsByCategory = ({ category, habit, date }) => {\n  const [habitData] = useState(habit);\n  const [cat] = useState(category);\n  const [currentDate, setCurrentDate] = useState(date);\n  const check = useRef(false);\n\n  const [state, dispatch] = useContext(Context);\n\n  useEffect(() => {\n    setCurrentDate(date);\n  }, [date]);\n\n  const getCurrentStatus = (currentDate, habit) => {\n    //console.log(habit);\n    let fDate = moment(currentDate).format(\"DDMMYYYY\");\n    let status = habit.filter((h) => h.date === fDate);\n\n    //console.log(status);\n\n    if (status.length === 0) {\n      return false;\n    } else {\n      return status;\n    }\n  };\n\n  const updateStatus = async (data) => {\n    let response = await HabitService.updateHabitStatus(data);\n    console.log(response);\n    if (response.status === 200) {\n      alert(\"Habit Status updated\");\n      check.current.focus();\n    }\n  };\n\n  const handelChange = (e, habit) => {\n    if (habit) {\n      console.log(habit);\n      console.log(e.target.checked);\n    }\n    let data = {\n      id: habit._id,\n      date: moment(currentDate).format(\"DDMMYYYY\"),\n      day: moment(currentDate).format(\"ddd\"),\n      isComplete: e.target.checked,\n      inputData: null,\n    };\n\n    if (habit.inputType !== \"checkbox\" && e.target.checked === true) {\n      let popupVal = prompt(`Enter the  value for ${habit.habitName}`, \"\");\n\n      if (popupVal === null) {\n        alert(\"Please enter the value \");\n      } else {\n        // save the changes to data base\n        data.inputData = popupVal;\n\n        updateStatus(data);\n      }\n    } else {\n      //format data for update which includes date, day , isComplete, data\n      //send post request to server to update data\n      updateStatus(data);\n    }\n  };\n\n  return (\n    <>\n      {habitData[cat].map((h) => {\n        return (\n          <TableRow key={h._id}>\n            <TableCell key={h._id} align=\"center\">\n              {h.habitName}\n            </TableCell>\n            <TableCell align=\"center\">\n              <Checkbox\n                checked={getCurrentStatus(currentDate, h.habitTrack)}\n                id={h._id}\n                onChange={(e) => handelChange(e, h)}\n                ref={check}\n              ></Checkbox>\n            </TableCell>\n          </TableRow>\n        );\n      })}\n    </>\n  );\n};\n\nexport default RenderHabitsByCategory;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx",["79","80","81","82"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx",["83"],"import Popover from \"@material-ui/core/Popover\";\nimport { Context } from \"../Store/habitStore\";\nimport HabitService from \"../services/habitService\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Checkbox,\n} from \"@material-ui/core\";\nimport React, { useContext, useState } from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nfunction TrackHabit() {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  console.log(state.habits);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n    console.log(event);\n\n    // update is track is also need to extracted\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want want to render the habits\n        console.log(res);\n      }\n\n      console.log(res);\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {state.habits\n                ? state.habits.map((h, i) => {\n                    return (\n                      <TableRow key={i}>\n                        <TableCell align=\"center\">{h.habitName}</TableCell>\n                        <TableCell align=\"center\">\n                          <Checkbox\n                            id={h._id}\n                            onChange={(e) => handleChange(e)}\n                            checked={h.isTracked}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                : null}\n            </TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Fab\n        aria-describedby={id}\n        size=\"small\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <AddIcon />\n      </Fab>\n    </div>\n  );\n}\n\nexport default TrackHabit;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js",[],{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","severity":1,"message":"89","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":25},{"ruleId":"88","severity":1,"message":"92","line":1,"column":17,"nodeType":"90","messageId":"91","endLine":1,"endColumn":27},{"ruleId":"88","severity":1,"message":"89","line":1,"column":29,"nodeType":"90","messageId":"91","endLine":1,"endColumn":37},{"ruleId":"88","severity":1,"message":"93","line":3,"column":10,"nodeType":"90","messageId":"91","endLine":3,"endColumn":17},{"ruleId":"88","severity":1,"message":"92","line":9,"column":17,"nodeType":"90","messageId":"91","endLine":9,"endColumn":27},{"ruleId":"88","severity":1,"message":"94","line":3,"column":3,"nodeType":"90","messageId":"91","endLine":3,"endColumn":14},{"ruleId":"88","severity":1,"message":"95","line":19,"column":10,"nodeType":"90","messageId":"91","endLine":19,"endColumn":15},{"ruleId":"88","severity":1,"message":"96","line":19,"column":17,"nodeType":"90","messageId":"91","endLine":19,"endColumn":25},{"ruleId":"88","severity":1,"message":"97","line":2,"column":3,"nodeType":"90","messageId":"91","endLine":2,"endColumn":11},{"ruleId":"88","severity":1,"message":"98","line":3,"column":3,"nodeType":"90","messageId":"91","endLine":3,"endColumn":7},{"ruleId":"88","severity":1,"message":"89","line":13,"column":40,"nodeType":"90","messageId":"91","endLine":13,"endColumn":48},{"ruleId":"88","severity":1,"message":"99","line":15,"column":8,"nodeType":"90","messageId":"91","endLine":15,"endColumn":30},{"ruleId":"88","severity":1,"message":"96","line":17,"column":17,"nodeType":"90","messageId":"91","endLine":17,"endColumn":25},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'Context' is defined but never used.","'useCallback' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'RenderHabitsByCategory' is defined but never used.","no-global-assign","no-unsafe-negation"]