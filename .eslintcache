[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx":"11","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx":"12","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js":"13","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx":"14","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js":"15","/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/utilitiesMethods.js":"16"},{"size":587,"mtime":1619701501152,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":1018,"mtime":1619701453671,"results":"20","hashOfConfig":"18"},{"size":182,"mtime":1619184099086,"results":"21","hashOfConfig":"18"},{"size":2985,"mtime":1619702077252,"results":"22","hashOfConfig":"18"},{"size":4498,"mtime":1618891276826,"results":"23","hashOfConfig":"18"},{"size":7010,"mtime":1619701331842,"results":"24","hashOfConfig":"18"},{"size":549,"mtime":1612993503351,"results":"25","hashOfConfig":"26"},{"size":691,"mtime":1619701685911,"results":"27","hashOfConfig":"18"},{"size":184,"mtime":1613099504994,"results":"28","hashOfConfig":"18"},{"size":996,"mtime":1616075163088,"results":"29","hashOfConfig":"18"},{"size":3555,"mtime":1619267679437,"results":"30","hashOfConfig":"18"},{"size":755,"mtime":1617027143531,"results":"31","hashOfConfig":"18"},{"size":2695,"mtime":1619266879501,"results":"32","hashOfConfig":"18"},{"size":1468,"mtime":1619714152689,"results":"33","hashOfConfig":"18"},{"size":2095,"mtime":1619710198166,"results":"34","hashOfConfig":"18"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"cl0ss3",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"37"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["73","74"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",["75"],"import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Store from \"./Store/habitStore\";\nimport Home from \"./pages\";\nimport AddHabit from \"./pages/addHabit\";\nimport Form from \"./components/form\";\nimport NavBar from \"./components/navBar\";\n\nconsole.log(\"*************** In App\");\n\nfunction App() {\n  // initialze process\n\n  // fretch data\n\n  let fetchHabits = () => {\n    // fetch data from habit api\n  };\n\n  // after data is fetched then hydrate the store state\n\n  //hydrate global state\n\n  //perform restructuring\n\n  return (\n    <React.Fragment>\n      <HashRouter basename=\"/\">\n        <Store>\n          <NavBar />\n          <main className=\"container-sm\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/addHabit\" component={AddHabit} />\n              <Route path=\"/form\" component={Form} />\n            </Switch>\n          </main>\n        </Store>\n      </HashRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",["76","77"],"import {\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Formik, useField } from \"formik\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as yup from \"yup\";\nimport habitService from \"../services/habitService\";\n\nconst Form = () => {\n  const [habit, setHabit] = useState(null);\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <Card className={classes.root}>\n      <h2>Add New Habit</h2>\n      <Formik\n        initialValues={{\n          category: \"General\",\n          habitName: \"\",\n          types: \"checkbox\",\n          color: \"black\",\n        }}\n        onSubmit={(data) => {\n          console.log(data);\n          setHabit(data);\n          saveHabit(data);\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleSubmit, handleChange, handleBlur }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={classes.root}>\n              <MySelectField\n                value={values.category}\n                select\n                label=\"Category\"\n                name=\"category\"\n                options={categories}\n              />\n            </div>\n            <div className={classes.root}>\n              <MyTextField label=\"Habit Name\" name=\"habitName\" type=\"input\" />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.types}\n                select\n                label=\"Types\"\n                name=\"types\"\n                options={types}\n              />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.color}\n                select\n                label=\"Color\"\n                name=\"color\"\n                options={colors}\n              />\n            </div>\n            <div>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Save Habit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MyTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst MySelectField = ({ label, options, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      select\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nconst validationSchema = yup.object({\n  category: yup.string().required().max(30),\n  habitName: yup.string().required().max(30),\n  types: yup.string().required(),\n  color: yup.string().required(),\n});\n\nconst saveHabit = async (habit) => {\n  //make a object of habit in order to send post\n\n  let habitData = {\n    category: habit.category,\n    habitName: habit.habitName,\n    inputType: habit.types,\n    color: habit.color,\n  };\n  console.log(\"in save habit\");\n\n  const response = await habitService.saveHabit(habitData);\n\n  console.log(response);\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    padding: 20,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst types = [\n  {\n    value: \"checkbox\",\n    label: \"Check Box\",\n  },\n  {\n    value: \"text\",\n    label: \"Text\",\n  },\n  {\n    value: \"number\",\n    label: \"Number\",\n  },\n];\n\nconst categories = [\n  {\n    value: \"General\",\n    label: \"General\",\n  },\n  {\n    value: \"Health/Nutrition\",\n    label: \"Health/Nutrition\",\n  },\n  {\n    value: \"Skills\",\n    label: \"Skills\",\n  },\n  {\n    value: \"Work/Study\",\n    label: \"Work/Study\",\n  },\n  {\n    value: \"House Hold\",\n    label: \"House Hold\",\n  },\n  {\n    value: \"Quit Habit\",\n    label: \"Quit Habit\",\n  },\n];\n\nconst colors = [\n  {\n    value: \"red\",\n    label: \"Red\",\n  },\n  {\n    value: \"blue\",\n    label: \"Blue\",\n  },\n  {\n    value: \"black\",\n    label: \"Black\",\n  },\n  {\n    value: \"green\",\n    label: \"Green\",\n  },\n];\n\nexport default Form;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["78","79","80","81"],"import { Checkbox, TableCell, TableRow } from \"@material-ui/core\";\nimport React, { useEffect, useState, useRef, useContext } from \"react\";\nimport moment from \"moment\";\nimport HabitService from \"../services/habitService\";\nimport { Context } from \"../Store/habitStore\";\n\nconsole.log(\"*************************In Render Categories\");\n\n// First day of week is sunday\nconst FIRST_WEEKDAY_INDEX = 0;\n\n// Last day of week is saturday\nconst LAST_WEEKDAY_INDEX = 6;\n\nconst RenderHabitsByCategory = ({ category }) => {\n  const [state, dispatch] = useContext(Context);\n  const [habitData, setHabitData] = useState(null);\n  const [cat] = useState(category);\n  const [currentDate, setCurrentDate] = useState(null);\n  const [habitStatus, setHabitStatus] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n\n  useEffect(() => {\n    setHabitData(state.habitRestructure);\n    setCurrentDate(state.currentDate);\n    setStartDate(state.weekStartDate);\n  }, [\n    state.habitRestructure,\n    state.category,\n    state.currentDate,\n    state.weekStartDate,\n  ]);\n\n  useEffect(() => {\n    const getCurrentStatus = (habit) => {\n      habit[cat].map((h) => {\n        //let fDate = moment(currentDate).format(\"DDMMYYYY\");\n\n        let ishabitComplete = {};\n        let name = h.habitName;\n        ishabitComplete[name] = [];\n        let forloop = false;\n        for (let i = FIRST_WEEKDAY_INDEX; i <= LAST_WEEKDAY_INDEX; i++) {\n          let dateCounter = moment(startDate).add(i, \"days\");\n          let formatedDate = moment(dateCounter).format(\"DDMMYYYY\");\n          let status = h.habitTrack.filter((d) => d.date === formatedDate);\n          //console.log(status[0].isComplete);\n          if (status.length > 0 && status[0].isComplete) {\n            ishabitComplete[name][i] = true;\n          } else {\n            ishabitComplete[name][i] = false;\n          }\n\n          if (i === 6) {\n            forloop = true;\n          }\n        }\n\n        if (forloop) {\n          dispatch({ type: \"SET_HABIT_STATUS\", payload: ishabitComplete });\n        }\n      });\n    };\n    getCurrentStatus(state.habitRestructure);\n  }, [cat, dispatch, startDate, state.habitRestructure]);\n\n  const check = useRef();\n\n  const updateStatus = async (data) => {\n    let response = await HabitService.updateHabitStatus(data);\n\n    if (response.status === 200) {\n      alert(\"Habit Status updated\");\n      check.current.focus();\n    }\n  };\n\n  const handelChange = (e, habit, index) => {\n    let data = {\n      id: habit._id,\n      date: moment(state.weekStartDate).add(index, \"days\").format(\"DDMMYYYY\"),\n      day: moment(state.weekStartDate).add(index, \"days\").format(\"ddd\"),\n      isComplete: e.target.checked,\n      inputData: null,\n    };\n    let name = habit.habitName;\n\n    let updateData = state.habitStatus;\n    updateData[name][index] = e.target.checked;\n    dispatch({ type: \"SET_HABIT_STATUS\", payload: updateData });\n\n    if (habit.inputType !== \"checkbox\" && e.target.checked === true) {\n      let popupVal = prompt(`Enter the  value for ${habit.habitName}`, \"\");\n\n      if (popupVal === null) {\n        alert(\"Please enter the value \");\n      } else {\n        // save the changes to data base\n        data.inputData = popupVal;\n        updateStatus(data);\n      }\n    } else {\n      //format data for update which includes date, day , isComplete, data\n      //send post request to server to update data\n      updateStatus(data);\n    }\n  };\n\n  return (\n    <>\n      {habitData ? (\n        habitData[cat].map((h) => {\n          return (\n            <TableRow key={h._id}>\n              <TableCell key={h._id} align=\"center\">\n                {h.habitName}\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={state.habitStatus[h.habitName][0] || false}\n                  index={0}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 0)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][1]\n                      : false\n                  }\n                  index={1}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 1)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][2]\n                      : false\n                  }\n                  index={2}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 2)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][3]\n                      : false\n                  }\n                  index={3}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 3)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][4]\n                      : false\n                  }\n                  index={4}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 4)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][5]\n                      : false\n                  }\n                  index={5}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 5)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][6]\n                      : false\n                  }\n                  index={6}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 6)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n            </TableRow>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default RenderHabitsByCategory;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/navBar.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabits.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reducer/reducer.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/TrackHabit.jsx",["82","83","84","85","86","87","88"],"import Popover from \"@material-ui/core/Popover\";\nimport { Context } from \"../Store/habitStore\";\nimport HabitService from \"../services/habitService\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Checkbox,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nfunction TrackHabit() {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const [habitTracked, setHabitTracked] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n\n    // update is track is also need to extracted\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want want to render the habits\n      }\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody></TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Fab\n        aria-describedby={id}\n        size=\"small\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <AddIcon />\n      </Fab>\n    </div>\n  );\n}\n\nexport default TrackHabit;\n\n// {\n//   state.habits\n//     ? state.habits.map((h, i) => {\n//         return (\n//           <TableRow key={i}>\n//             <TableCell align=\"center\">{h.habitName}</TableCell>\n//             <TableCell align=\"center\">\n//               <Checkbox\n//                 id={h._id}\n//                 onChange={(e) => handleChange(e)}\n//                 checked={h.isTracked}\n//               />\n//             </TableCell>\n//           </TableRow>\n//         );\n//       })\n//     : null;\n// }\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/Store/habitStore.js",["89"],"import { createContext, useReducer } from \"react\";\nimport Reducer from \"../reducer/reducer\";\nimport {\n  getTodayDate,\n  getWeekStartDate,\n  getWeekEndDate,\n  fetchHabitData,\n  extractHabitNames,\n  extractCategories,\n} from \"../utilities/utilitiesMethods\";\n\nimport habitService from \"../services/habitService\";\nconsole.log(\"*************************In store\");\n\nlet habits = [];\nlet habitList = [];\nlet category = [];\n\nconst TODAY_DATE = getTodayDate();\nconst CURRENT_WEEK_START_DATE = getWeekStartDate();\nconst CURRENT_WEEK_END_DATE = getWeekEndDate();\n\nfunction* fetchAndRestructureData() {\n  yield habitService.getHabits();\n}\n\nconst gen = fetchAndRestructureData();\nconst futureData = gen.next().value;\nconsole.log(futureData);\nfutureData.then((value) => {\n  console.log(value.data);\n  habits = value.data;\n  habitList = extractHabitNames(habits);\n  category = extractCategories(habits);\n\n  console.log(habitList);\n});\n\nconst initialState = {\n  habits: habits || [],\n  category: category || [],\n  habitsNameList: habitList || [],\n  habitRestructure: {},\n  habitStatus: [],\n  error: [],\n  currentDate: TODAY_DATE,\n  weekStartDate: CURRENT_WEEK_START_DATE,\n  weekEndDate: CURRENT_WEEK_END_DATE,\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/utilities/utilitiesMethods.js",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":16,"column":7,"nodeType":"96","messageId":"97","endLine":16,"endColumn":18},{"ruleId":"94","severity":1,"message":"98","line":9,"column":17,"nodeType":"96","messageId":"97","endLine":9,"endColumn":27},{"ruleId":"94","severity":1,"message":"99","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":15},{"ruleId":"94","severity":1,"message":"100","line":19,"column":10,"nodeType":"96","messageId":"97","endLine":19,"endColumn":21},{"ruleId":"94","severity":1,"message":"101","line":20,"column":10,"nodeType":"96","messageId":"97","endLine":20,"endColumn":21},{"ruleId":"94","severity":1,"message":"102","line":20,"column":23,"nodeType":"96","messageId":"97","endLine":20,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":36,"column":26,"nodeType":"105","messageId":"106","endLine":36,"endColumn":28},{"ruleId":"94","severity":1,"message":"107","line":10,"column":3,"nodeType":"96","messageId":"97","endLine":10,"endColumn":11},{"ruleId":"94","severity":1,"message":"108","line":12,"column":29,"nodeType":"96","messageId":"97","endLine":12,"endColumn":38},{"ruleId":"94","severity":1,"message":"109","line":17,"column":10,"nodeType":"96","messageId":"97","endLine":17,"endColumn":15},{"ruleId":"94","severity":1,"message":"110","line":17,"column":17,"nodeType":"96","messageId":"97","endLine":17,"endColumn":25},{"ruleId":"94","severity":1,"message":"111","line":20,"column":10,"nodeType":"96","messageId":"97","endLine":20,"endColumn":22},{"ruleId":"94","severity":1,"message":"112","line":20,"column":24,"nodeType":"96","messageId":"97","endLine":20,"endColumn":39},{"ruleId":"94","severity":1,"message":"113","line":29,"column":9,"nodeType":"96","messageId":"97","endLine":29,"endColumn":21},{"ruleId":"94","severity":1,"message":"114","line":7,"column":3,"nodeType":"96","messageId":"97","endLine":7,"endColumn":17},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],"no-unused-vars","'fetchHabits' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'habit' is assigned a value but never used.","'currentDate' is assigned a value but never used.","'habitStatus' is assigned a value but never used.","'setHabitStatus' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Checkbox' is defined but never used.","'useEffect' is defined but never used.","'state' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'habitTracked' is assigned a value but never used.","'setHabitTracked' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'fetchHabitData' is defined but never used.","no-global-assign","no-unsafe-negation"]