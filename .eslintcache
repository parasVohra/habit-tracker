[{"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js":"1","/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js":"2","/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js":"3","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx":"4","/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx":"5","/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx":"6","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx":"7","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx":"8","/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx":"9","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js":"10","/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js":"11"},{"size":512,"mtime":1611785780185,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":1130,"mtime":1612112822717,"results":"15","hashOfConfig":"13"},{"size":2183,"mtime":1612061701924,"results":"16","hashOfConfig":"13"},{"size":5991,"mtime":1615994402977,"results":"17","hashOfConfig":"13"},{"size":85,"mtime":1611877761129,"results":"18","hashOfConfig":"13"},{"size":4531,"mtime":1615392956999,"results":"19","hashOfConfig":"13"},{"size":4040,"mtime":1615996487881,"results":"20","hashOfConfig":"13"},{"size":549,"mtime":1612993503351,"results":"21","hashOfConfig":"22"},{"size":637,"mtime":1615733614739,"results":"23","hashOfConfig":"13"},{"size":184,"mtime":1613099504994,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"pyu0sr",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r1jpga",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/parasvohra/Desktop/React Project/habit-tracker/src/index.js",[],["49","50"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/reportWebVitals.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/App.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/addHabit.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/pages/index.jsx",["51","52","53"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { HabitContext } from \"../context/HabitContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Checkbox,\n  Button,\n} from \"@material-ui/core\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport { green } from \"@material-ui/core/colors\";\nimport RenderHabitsByCategory from \"../components/RenderHabitsByCategory\";\nimport Popover from \"@material-ui/core/Popover\";\nimport HabitService from \"../services/habitService\";\nimport moment from \"moment\";\n\nexport function Index() {\n  //const { habit } = useContext(HabitContext);\n  const [habits, setHabits] = useState(null);\n  const [categories, setCategories] = useState(null);\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [todayDate] = useState(moment()._d);\n  const [currentDate, setCurrentDate] = useState(moment()._d);\n  const [isNextDisable, setNextDisable] = useState(false);\n\n  // this fetch function is need to extracted and need to be reused\n  useEffect(() => {\n    //fetch habits from server\n    if (\n      moment(currentDate).format(\"DDMMYYYY\") === moment().format(\"DDMMYYYY\")\n    ) {\n      setNextDisable(true);\n    }\n    async function fetchData() {\n      // You can await here\n      const { data } = await HabitService.getHabits();\n      setHabits(data);\n\n      //create category array based on habits data\n      let categoryArray = habitCategory(data);\n      setCategories(categoryArray);\n    }\n    fetchData();\n    console.log(currentDate);\n  }, [currentDate]);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const showPrevDate = () => {\n    // change the current date to previous date\n    let prevDate = moment(currentDate).add(-1, \"days\");\n    setNextDisable(false);\n    setCurrentDate(prevDate._d);\n  };\n\n  const showNextDate = () => {\n    // change the current date to next date\n    let nextDate = moment(currentDate).add(1, \"days\");\n    setCurrentDate(nextDate._d);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n    console.log(event);\n\n    // update is track is also need to extracted\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want want to render the habits\n      }\n\n      console.log(res);\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <h2>Home</h2>\n      <div>{moment(currentDate).format(\"DDMMYYYY\")}</div>\n      <Fab\n        aria-describedby={id}\n        size=\"small\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <AddIcon />\n      </Fab>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {habits\n                ? habits.map((h, i) => {\n                    return (\n                      <TableRow key={i}>\n                        <TableCell align=\"center\">{h.habitName}</TableCell>\n                        <TableCell align=\"center\">\n                          <Checkbox\n                            id={h._id}\n                            onChange={(e) => handleChange(e)}\n                            checked={h.isTracked}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                : null}\n            </TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Button variant=\"contained\" color=\"primary\" onClick={showPrevDate}>\n        Prev\n      </Button>\n      <Button\n        disabled={isNextDisable}\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={showNextDate}\n      >\n        Next\n      </Button>\n\n      <TableContainer className={classes.table} component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Habits </TableCell>\n              <TableCell align=\"center\">Current Day</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {categories\n              ? categories.map((c) => {\n                  return (\n                    <RenderHabitsByCategory\n                      category={c}\n                      habit={habits}\n                      key={c}\n                      date={currentDate}\n                    />\n                  );\n                })\n              : null}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n\nconst habitCategory = (habits) => {\n  let category = {};\n  let categoryArray = [];\n  if (habits) {\n    for (let h of habits) {\n      if (!category.hasOwnProperty(h.category)) {\n        categoryArray.push(h.category);\n        category[h.category] = \" \";\n      } else {\n        category[h.category] = \" \";\n      }\n    }\n  }\n\n  return categoryArray;\n};\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    maxWidth: 600,\n    paddingLeft: 10,\n  },\n  checkbox: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n});\n","/Users/parasvohra/Desktop/React Project/habit-tracker/src/context/HabitContext.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/form.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderHabitsByCategory.jsx",["54","55"],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/components/RenderModel.jsx",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/habitService.js",[],"/Users/parasvohra/Desktop/React Project/habit-tracker/src/services/httpService.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":17,"nodeType":"62","messageId":"63","endLine":1,"endColumn":27},{"ruleId":"60","severity":1,"message":"64","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":22},{"ruleId":"60","severity":1,"message":"65","line":29,"column":10,"nodeType":"62","messageId":"63","endLine":29,"endColumn":19},{"ruleId":"60","severity":1,"message":"66","line":2,"column":17,"nodeType":"62","messageId":"63","endLine":2,"endColumn":28},{"ruleId":"60","severity":1,"message":"67","line":6,"column":8,"nodeType":"62","messageId":"63","endLine":6,"endColumn":17},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'HabitContext' is defined but never used.","'todayDate' is assigned a value but never used.","'useCallback' is defined but never used.","'Condition' is defined but never used.","no-global-assign","no-unsafe-negation"]