{"version":3,"sources":["reducer/reducer.js","services/httpService.js","services/habitService.js","utilities/utilitiesMethods.js","Store/habitStore.js","components/RenderHabitsByCategory.jsx","components/RenderHabits.jsx","components/TrackHabit.jsx","pages/index.jsx","pages/addHabit.jsx","components/form.jsx","components/navBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Reducer","state","action","type","payload","habits","category","habitRestructure","habitStatus","Object","assign","currentDate","get","axios","post","put","delete","data","a","http","apiUrl","console","log","saveHabit","getHabits","updateHabitStatus","updateIsTracked","extractCategories","habitObject","uniqueCategories","reduce","categories","hasOwnProperty","push","fetchAndRestructureData","habitList","TODAY_DATE","Date","CURRENT_WEEK_START_DATE","startOfWeek","CURRENT_WEEK_END_DATE","endOfWeek","habitService","futureData","next","value","then","map","habit","habitName","initialState","habitsNameList","error","weekStartDate","weekEndDate","Context","createContext","Store","children","useReducer","dispatch","Provider","RenderHabitsByCategory","useContext","useState","habitData","setHabitData","cat","setCurrentDate","startDate","setStartDate","useEffect","h","ishabitComplete","name","forloop","i","dateCounter","moment","add","formatedDate","format","status","habitTrack","filter","d","date","length","isComplete","check","useRef","updateStatus","HabitService","alert","current","focus","handelChange","e","index","id","_id","day","target","checked","inputData","updateData","inputType","popupVal","prompt","TableRow","TableCell","align","Checkbox","onChange","ref","size","useStyles","makeStyles","theme","root","flexGrow","paper","padding","textAlign","color","table","minWidth","RenderHabits","classes","HabitsByCategory","className","TableContainer","component","Paper","Table","aria-label","stickyHeader","TableHead","TableBody","c","TrackHabit","anchorEl","setAnchorEl","open","Boolean","undefined","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Fab","aria-describedby","onClick","event","currentTarget","Home","isNextDisable","setNextDisable","fetchData","weekday","changeDate","n","changedDate","_d","Fragment","style","margin","Grid","container","spacing","item","xs","justify","Button","variant","disabled","maxWidth","paddingLeft","checkbox","green","AddHabit","MyTextField","label","props","useField","field","meta","errorText","touched","TextField","helperText","MySelectField","options","select","option","MenuItem","validationSchema","yup","required","max","types","response","bullet","display","transform","title","fontSize","pos","marginBottom","colors","Form","setHabit","Card","initialValues","onSubmit","values","handleSubmit","handleChange","handleBlur","JSON","stringify","NavBar","textDecoration","activeStyle","to","exact","App","basename","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc76b8df.chunk.js","sourcesContent":["const Reducer = (state, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case \"SET_HABIT\":\n      return {\n        ...state,\n        habits: payload,\n      };\n    case \"SET_CATEGORY\":\n      return {\n        ...state,\n        category: payload,\n      };\n    case \"SET_HABIT_RESTRUCTURE\":\n      return {\n        ...state,\n        habitRestructure: payload,\n      };\n    case \"SET_ERROR\":\n      return {\n        ...state,\n      };\n    case \"SET_HABIT_STATUS\":\n      return {\n        ...state,\n        habitStatus: Object.assign({}, state.habitStatus, payload),\n      };\n    case \"SET_CURRENT_DATE\":\n      return {\n        ...state,\n        currentDate: payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default Reducer;\n","/* eslint-disable import/no-anonymous-default-export */\nimport axios from \"axios\";\n\nexport default {\n  get: axios.get,\n  post: axios.post,\n  put: axios.put,\n  delete: axios.delete,\n};\n","/* eslint import/no-anonymous-default-export: [2, {\"allowObject\": true}] */\n\nimport http from \"./httpService\";\nimport { apiUrl } from \"../config.json\";\n\nconsole.log(\"*************************In Services\");\n\nexport async function saveHabit(data) {\n  return await http.post(apiUrl + \"saveHabit\", data);\n}\nexport async function getHabits() {\n  return await http.get(apiUrl + \"getHabits\");\n}\n\nexport async function updateHabitStatus(data) {\n  return await http.post(apiUrl + \"updateHabit\", data);\n}\n\nexport async function updateIsTracked(data) {\n  return await http.post(apiUrl + \"updateIsTracked\", data);\n}\n\nexport default {\n  saveHabit,\n  getHabits,\n  updateHabitStatus,\n  updateIsTracked,\n};\n","/**\n *  Utilities methods\n */\n\n//Dependencies\nimport { startOfWeek, endOfWeek } from \"date-fns\";\nimport habitService from \"../services/habitService\";\n\nconsole.log(\"*************************In Utilities\");\n\n// fetch data from habit server\nexport function fetchHabitData() {\n  let habits = habitService.getHabits();\n  Promise.all([habits]).then((x) => {\n    return x[0].data;\n  });\n}\n\n/**\n * @requires: habits object\n * @returns: categories array or error string\n */\nexport function extractCategories(habitObject) {\n  // if passed argument is of type object then reduce categories else return error msg\n\n  let uniqueCategories = {};\n\n  // reduce categories from habit object\n  let categoryArray = habitObject.reduce((categories, habits) => {\n    if (!uniqueCategories.hasOwnProperty(habits.category)) {\n      categories.push(habits.category);\n    }\n    uniqueCategories[habits.category] = \"\";\n    return categories;\n  }, []);\n\n  return categoryArray;\n}\n\n/**\n *\n * @param {*} habitObject\n * @returns habitsNameList\n */\nexport function extractHabitNames(habitObject) {\n  console.log(habitObject);\n  return habitObject.map((habit) => {\n    return habit.habitName;\n  }, []);\n}\n\n//etchHabitData();\n\n/**\n * @requires: habits object\n * @returns: habit restructure array\n */\nexport function restructureHabits(habitObject) {\n  // if passed argument is of type object then map habit by categories else return error msg\n  let uniqueCategories = {};\n\n  // reduce categories from habit object\n  let categoryArray = habitObject.reduce((categories, habits) => {\n    if (!uniqueCategories.hasOwnProperty(habits.category)) {\n      categories.push(habits.category);\n    }\n    uniqueCategories[habits.category] = \"\";\n    return categories;\n  }, []);\n\n  return categoryArray;\n}\n\nexport function getTodayDate() {\n  return new Date();\n}\n\n// get start of week from date fns\nexport function getWeekStartDate() {\n  let weekStartDate = startOfWeek(new Date());\n  return weekStartDate;\n}\n\n// get end of week from date fns\nexport function getWeekEndDate() {\n  let weekEndDate = endOfWeek(new Date());\n  return weekEndDate;\n}\n","import { createContext, useReducer } from \"react\";\nimport Reducer from \"../reducer/reducer\";\nimport {\n  getTodayDate,\n  getWeekStartDate,\n  getWeekEndDate,\n  fetchHabitData,\n  extractHabitNames,\n  extractCategories,\n} from \"../utilities/utilitiesMethods\";\n\nimport habitService from \"../services/habitService\";\nconsole.log(\"*************************In store\");\n\nlet habits = [];\nlet habitList = [];\nlet category = [];\n\nconst TODAY_DATE = getTodayDate();\nconst CURRENT_WEEK_START_DATE = getWeekStartDate();\nconst CURRENT_WEEK_END_DATE = getWeekEndDate();\n\nfunction* fetchAndRestructureData() {\n  yield habitService.getHabits();\n}\n\nconst gen = fetchAndRestructureData();\nconst futureData = gen.next().value;\nconsole.log(futureData);\nfutureData.then((value) => {\n  console.log(value.data);\n  habits = value.data;\n  habitList = extractHabitNames(habits);\n  category = extractCategories(habits);\n\n  console.log(habitList);\n});\n\nconst initialState = {\n  habits: habits || [],\n  category: category || [],\n  habitsNameList: habitList || [],\n  habitRestructure: {},\n  habitStatus: [],\n  error: [],\n  currentDate: TODAY_DATE,\n  weekStartDate: CURRENT_WEEK_START_DATE,\n  weekEndDate: CURRENT_WEEK_END_DATE,\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","import { Checkbox, TableCell, TableRow } from \"@material-ui/core\";\nimport React, { useEffect, useState, useRef, useContext } from \"react\";\nimport moment from \"moment\";\nimport HabitService from \"../services/habitService\";\nimport { Context } from \"../Store/habitStore\";\n\nconsole.log(\"*************************In Render Categories\");\n\n// First day of week is sunday\nconst FIRST_WEEKDAY_INDEX = 0;\n\n// Last day of week is saturday\nconst LAST_WEEKDAY_INDEX = 6;\n\nconst RenderHabitsByCategory = ({ category }) => {\n  const [state, dispatch] = useContext(Context);\n  const [habitData, setHabitData] = useState(null);\n  const [cat] = useState(category);\n  const [currentDate, setCurrentDate] = useState(null);\n  const [habitStatus, setHabitStatus] = useState(false);\n  const [startDate, setStartDate] = useState(null);\n\n  useEffect(() => {\n    setHabitData(state.habitRestructure);\n    setCurrentDate(state.currentDate);\n    setStartDate(state.weekStartDate);\n  }, [\n    state.habitRestructure,\n    state.category,\n    state.currentDate,\n    state.weekStartDate,\n  ]);\n\n  useEffect(() => {\n    const getCurrentStatus = (habit) => {\n      habit[cat].map((h) => {\n        //let fDate = moment(currentDate).format(\"DDMMYYYY\");\n\n        let ishabitComplete = {};\n        let name = h.habitName;\n        ishabitComplete[name] = [];\n        let forloop = false;\n        for (let i = FIRST_WEEKDAY_INDEX; i <= LAST_WEEKDAY_INDEX; i++) {\n          let dateCounter = moment(startDate).add(i, \"days\");\n          let formatedDate = moment(dateCounter).format(\"DDMMYYYY\");\n          let status = h.habitTrack.filter((d) => d.date === formatedDate);\n          //console.log(status[0].isComplete);\n          if (status.length > 0 && status[0].isComplete) {\n            ishabitComplete[name][i] = true;\n          } else {\n            ishabitComplete[name][i] = false;\n          }\n\n          if (i === 6) {\n            forloop = true;\n          }\n        }\n\n        if (forloop) {\n          dispatch({ type: \"SET_HABIT_STATUS\", payload: ishabitComplete });\n        }\n      });\n    };\n    getCurrentStatus(state.habitRestructure);\n  }, [cat, dispatch, startDate, state.habitRestructure]);\n\n  const check = useRef();\n\n  const updateStatus = async (data) => {\n    let response = await HabitService.updateHabitStatus(data);\n\n    if (response.status === 200) {\n      alert(\"Habit Status updated\");\n      check.current.focus();\n    }\n  };\n\n  const handelChange = (e, habit, index) => {\n    let data = {\n      id: habit._id,\n      date: moment(state.weekStartDate).add(index, \"days\").format(\"DDMMYYYY\"),\n      day: moment(state.weekStartDate).add(index, \"days\").format(\"ddd\"),\n      isComplete: e.target.checked,\n      inputData: null,\n    };\n    let name = habit.habitName;\n\n    let updateData = state.habitStatus;\n    updateData[name][index] = e.target.checked;\n    dispatch({ type: \"SET_HABIT_STATUS\", payload: updateData });\n\n    if (habit.inputType !== \"checkbox\" && e.target.checked === true) {\n      let popupVal = prompt(`Enter the  value for ${habit.habitName}`, \"\");\n\n      if (popupVal === null) {\n        alert(\"Please enter the value \");\n      } else {\n        // save the changes to data base\n        data.inputData = popupVal;\n        updateStatus(data);\n      }\n    } else {\n      //format data for update which includes date, day , isComplete, data\n      //send post request to server to update data\n      updateStatus(data);\n    }\n  };\n\n  return (\n    <>\n      {habitData ? (\n        habitData[cat].map((h) => {\n          return (\n            <TableRow key={h._id}>\n              <TableCell key={h._id} align=\"center\">\n                {h.habitName}\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={state.habitStatus[h.habitName][0] || false}\n                  index={0}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 0)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][1]\n                      : false\n                  }\n                  index={1}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 1)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][2]\n                      : false\n                  }\n                  index={2}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 2)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][3]\n                      : false\n                  }\n                  index={3}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 3)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][4]\n                      : false\n                  }\n                  index={4}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 4)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][5]\n                      : false\n                  }\n                  index={5}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 5)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n              <TableCell align=\"center\">\n                <Checkbox\n                  checked={\n                    state.habitStatus\n                      ? state.habitStatus[h.habitName][6]\n                      : false\n                  }\n                  index={6}\n                  id={h._id}\n                  onChange={(e) => handelChange(e, h, 6)}\n                  ref={check}\n                  size=\"small\"\n                ></Checkbox>\n              </TableCell>\n            </TableRow>\n          );\n        })\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nexport default RenderHabitsByCategory;\n","import {\n  makeStyles,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect } from \"react\";\n\nimport RenderHabitsByCategory from \"../components/RenderHabitsByCategory\";\nimport { Context } from \"../Store/habitStore\";\nimport { extractCategories } from \"../utilities/utilitiesMethods\";\n\nconst RenderHabits = ({ habit, date }) => {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n\n  useEffect(() => {\n    const [habit, category] = HabitsByCategory(state.habits);\n\n    dispatch({ type: \"SET_CATEGORY\", payload: category });\n\n    dispatch({ type: \"SET_HABIT_RESTRUCTURE\", payload: habit });\n    console.log(extractCategories(state.habits));\n\n    console.log(\"hi\");\n  }, [dispatch, state.habits]);\n\n  console.log(extractCategories(state.habits));\n\n  return (\n    <div className={classes.root}>\n      <TableContainer className={classes.table} component={Paper}>\n        <Table\n          aria-label=\"simple table\"\n          padding=\"none\"\n          size=\"small\"\n          stickyHeader\n        >\n          <TableHead>\n            <TableRow>\n              <TableCell align=\"center\">Habits </TableCell>\n              <TableCell align=\"center\">S</TableCell>\n              <TableCell align=\"center\">M</TableCell>\n              <TableCell align=\"center\">T</TableCell>\n              <TableCell align=\"center\">W</TableCell>\n              <TableCell align=\"center\">T</TableCell>\n              <TableCell align=\"center\">F</TableCell>\n              <TableCell align=\"center\">S</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {state.habitRestructure ? (\n              <>\n                {state.category ? (\n                  state.category.map((c, index) => {\n                    return (\n                      <>\n                        <TableRow key={c}>\n                          <TableCell>\n                            <strong>{c}</strong>\n                          </TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                          <TableCell></TableCell>\n                        </TableRow>\n                        <RenderHabitsByCategory category={c} />\n                      </>\n                    );\n                  })\n                ) : (\n                  <TableCell>ss</TableCell>\n                )}\n              </>\n            ) : (\n              <TableCell>ss</TableCell>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: \"5px\",\n    textAlign: \"center\",\n    color: \"black\",\n  },\n  table: {\n    minWidth: 350,\n  },\n}));\n\n//restructure habits by categories\nfunction HabitsByCategory(habits) {\n  let habitRestructure = {};\n  let categories = [];\n  // if category is present in object\n  if (habits) {\n    for (let h of habits) {\n      if (!habitRestructure.hasOwnProperty(h.category)) {\n        categories.push(h.category);\n        habitRestructure[h.category] = [];\n        habitRestructure[h.category].push(h);\n      } else {\n        habitRestructure[h.category].push(h);\n      }\n    }\n  }\n  return [habitRestructure, categories];\n}\nexport default RenderHabits;\n","import Popover from \"@material-ui/core/Popover\";\nimport { Context } from \"../Store/habitStore\";\nimport HabitService from \"../services/habitService\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  TableHead,\n  Checkbox,\n} from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nfunction TrackHabit() {\n  const [state, dispatch] = useContext(Context);\n  const [anchorEl, setAnchorEl] = useState(null);\n\n  const [habitTracked, setHabitTracked] = useState(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleChange = (event) => {\n    let data = {\n      id: event.target.id,\n      isTracked: event.target.checked,\n    };\n\n    // update is track is also need to extracted\n    async function updateIsTracked() {\n      const res = await HabitService.updateIsTracked(data);\n      if (res.status === 200 && res.data.nModified === 1) {\n        // here i want to fetch the updated habit data from the server\n        // and also i want want to render the habits\n      }\n    }\n\n    updateIsTracked();\n  };\n\n  const open = Boolean(anchorEl);\n\n  const id = open ? \"simple-popover\" : undefined;\n\n  return (\n    <div>\n      <Popover\n        id={id}\n        open={open}\n        anchorEl={anchorEl}\n        onClose={handleClose}\n        anchorOrigin={{\n          vertical: \"bottom\",\n          horizontal: \"center\",\n        }}\n        transformOrigin={{\n          vertical: \"top\",\n          horizontal: \"center\",\n        }}\n      >\n        <div>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align=\"center\">Habits </TableCell>\n                <TableCell align=\"center\">Track Habit</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody></TableBody>\n          </Table>\n        </div>\n      </Popover>\n\n      <Fab\n        aria-describedby={id}\n        size=\"small\"\n        color=\"primary\"\n        onClick={handleClick}\n      >\n        <AddIcon />\n      </Fab>\n    </div>\n  );\n}\n\nexport default TrackHabit;\n\n// {\n//   state.habits\n//     ? state.habits.map((h, i) => {\n//         return (\n//           <TableRow key={i}>\n//             <TableCell align=\"center\">{h.habitName}</TableCell>\n//             <TableCell align=\"center\">\n//               <Checkbox\n//                 id={h._id}\n//                 onChange={(e) => handleChange(e)}\n//                 checked={h.isTracked}\n//               />\n//             </TableCell>\n//           </TableRow>\n//         );\n//       })\n//     : null;\n// }\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { Context } from \"../Store/habitStore\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { green } from \"@material-ui/core/colors\";\nimport HabitService from \"../services/habitService\";\nimport moment from \"moment\";\nimport RenderHabits from \"../components/RenderHabits\";\nimport TrackHabit from \"../components/TrackHabit\";\n\nconsole.log(\"************ In Home page Component \");\n\nexport default function Home() {\n  const [state, dispatch] = useContext(Context);\n  const classes = useStyles();\n  const [isNextDisable, setNextDisable] = useState(false);\n\n  console.log(state);\n\n  // this fetch function is need to extracted and need to be reused\n  useEffect(() => {\n    //fetch habits from server\n    if (\n      moment(state.currentDate).format(\"DDMMYYYY\") ===\n      moment().format(\"DDMMYYYY\")\n    ) {\n      setNextDisable(true);\n    } else {\n      setNextDisable(false);\n    }\n    async function fetchData() {\n      console.log(\"getting habits\");\n      // You can await here\n      const { data } = await HabitService.getHabits();\n      dispatch({ type: \"SET_HABIT\", payload: data });\n    }\n    fetchData();\n  }, [state.currentDate, dispatch]);\n\n  console.log(moment().weekday());\n  console.log(state.weekStartDate);\n  console.log(state.weekEndDate);\n\n  const changeDate = (n) => {\n    // change the current date to prev or next date\n    let changedDate = moment(state.currentDate).add(n, \"days\");\n    dispatch({ type: \"SET_CURRENT_DATE\", payload: changedDate._d });\n  };\n\n  return (\n    <React.Fragment>\n      <div style={{ margin: \"20px\" }}>\n        {moment(state.currentDate).format(\"DDMMYYYY\")}\n      </div>\n\n      <Grid container className={classes.root} spacing={2}>\n        <Grid item xs={12}>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(-1)}\n              >\n                Prev\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                style={{ margin: \"20px\" }}\n                disabled={isNextDisable}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => changeDate(1)}\n              >\n                Next\n              </Button>\n            </Grid>\n            <Grid xs={3} item></Grid>\n            <Grid item justify=\"flex-end\">\n              <TrackHabit />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\">\n            <RenderHabits />\n          </Grid>\n        </Grid>\n      </Grid>\n    </React.Fragment>\n  );\n}\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 200,\n    maxWidth: 600,\n    paddingLeft: 10,\n  },\n  checkbox: {\n    color: green[400],\n    \"&$checked\": {\n      color: green[600],\n    },\n  },\n});\n","import React from \"react\";\nimport RenderHabits from \"../components/RenderHabits\";\n\nexport default function AddHabit() {\n  return (\n    <div>\n      <RenderHabits />\n    </div>\n  );\n}\n","import {\n  Button,\n  Card,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport { Formik, useField } from \"formik\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport * as yup from \"yup\";\nimport habitService from \"../services/habitService\";\n\nconst Form = () => {\n  const [habit, setHabit] = useState(null);\n  const classes = useStyles();\n\n  useEffect(() => {}, []);\n\n  return (\n    <Card className={classes.root}>\n      <h2>Add New Habit</h2>\n      <Formik\n        initialValues={{\n          category: \"General\",\n          habitName: \"\",\n          types: \"checkbox\",\n          color: \"black\",\n        }}\n        onSubmit={(data) => {\n          console.log(data);\n          setHabit(data);\n          saveHabit(data);\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, handleSubmit, handleChange, handleBlur }) => (\n          <form onSubmit={handleSubmit}>\n            <div className={classes.root}>\n              <MySelectField\n                value={values.category}\n                select\n                label=\"Category\"\n                name=\"category\"\n                options={categories}\n              />\n            </div>\n            <div className={classes.root}>\n              <MyTextField label=\"Habit Name\" name=\"habitName\" type=\"input\" />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.types}\n                select\n                label=\"Types\"\n                name=\"types\"\n                options={types}\n              />\n            </div>\n\n            <div className={classes.root}>\n              <MySelectField\n                value={values.color}\n                select\n                label=\"Color\"\n                name=\"color\"\n                options={colors}\n              />\n            </div>\n            <div>\n              <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n                Save Habit\n              </Button>\n            </div>\n            <pre>{JSON.stringify(values, null, 2)}</pre>\n          </form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MyTextField = ({ label, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n  return (\n    <TextField\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n\nconst MySelectField = ({ label, options, ...props }) => {\n  const [field, meta] = useField(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  return (\n    <TextField\n      select\n      label={label}\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    >\n      {options.map((option) => (\n        <MenuItem key={option.value} value={option.value}>\n          {option.label}\n        </MenuItem>\n      ))}\n    </TextField>\n  );\n};\n\nconst validationSchema = yup.object({\n  category: yup.string().required().max(30),\n  habitName: yup.string().required().max(30),\n  types: yup.string().required(),\n  color: yup.string().required(),\n});\n\nconst saveHabit = async (habit) => {\n  //make a object of habit in order to send post\n\n  let habitData = {\n    category: habit.category,\n    habitName: habit.habitName,\n    inputType: habit.types,\n    color: habit.color,\n  };\n  console.log(\"in save habit\");\n\n  const response = await habitService.saveHabit(habitData);\n\n  console.log(response);\n};\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    padding: 20,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nconst types = [\n  {\n    value: \"checkbox\",\n    label: \"Check Box\",\n  },\n  {\n    value: \"text\",\n    label: \"Text\",\n  },\n  {\n    value: \"number\",\n    label: \"Number\",\n  },\n];\n\nconst categories = [\n  {\n    value: \"General\",\n    label: \"General\",\n  },\n  {\n    value: \"Health/Nutrition\",\n    label: \"Health/Nutrition\",\n  },\n  {\n    value: \"Skills\",\n    label: \"Skills\",\n  },\n  {\n    value: \"Work/Study\",\n    label: \"Work/Study\",\n  },\n  {\n    value: \"House Hold\",\n    label: \"House Hold\",\n  },\n  {\n    value: \"Quit Habit\",\n    label: \"Quit Habit\",\n  },\n];\n\nconst colors = [\n  {\n    value: \"red\",\n    label: \"Red\",\n  },\n  {\n    value: \"blue\",\n    label: \"Blue\",\n  },\n  {\n    value: \"black\",\n    label: \"Black\",\n  },\n  {\n    value: \"green\",\n    label: \"Green\",\n  },\n];\n\nexport default Form;\n","import React from \"react\";\n\nimport { NavLink } from \"react-router-dom\";\n\nconst NavBar = () => {\n  return (\n    <React.Fragment>\n      <nav>\n        <React.Fragment>\n          <NavLink\n            style={{\n              textDecoration: \"none\",\n              padding: \"20px\",\n              color: \"grey\",\n              fontSize: \"25px\",\n            }}\n            activeStyle={{\n              color: \"black\",\n              fontSize: \"26px\",\n            }}\n            to=\"/\"\n            exact\n          >\n            Home\n          </NavLink>\n          <NavLink\n            style={{\n              textDecoration: \"none\",\n              padding: \"20px\",\n              color: \"grey\",\n              fontSize: \"25px\",\n            }}\n            activeStyle={{\n              color: \"black\",\n              fontSize: \"26px\",\n            }}\n            to=\"/form\"\n          >\n            Form\n          </NavLink>\n        </React.Fragment>\n      </nav>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Store from \"./Store/habitStore\";\nimport Home from \"./pages\";\nimport AddHabit from \"./pages/addHabit\";\nimport Form from \"./components/form\";\nimport NavBar from \"./components/navBar\";\n\nconsole.log(\"*************** In App\");\n\nfunction App() {\n  // initialze process\n\n  // fretch data\n\n  let fetchHabits = () => {\n    // fetch data from habit api\n  };\n\n  // after data is fetched then hydrate the store state\n\n  //hydrate global state\n\n  //perform restructuring\n\n  return (\n    <React.Fragment>\n      <HashRouter basename=\"/\">\n        <Store>\n          <NavBar />\n          <main className=\"container-sm\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/addHabit\" component={AddHabit} />\n              <Route path=\"/form\" component={Form} />\n            </Switch>\n          </main>\n        </Store>\n      </HashRouter>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconsole.log(\"************* In Index.js\");\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}